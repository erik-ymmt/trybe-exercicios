// use ("conteudo_trybe");

// db.inventory.insertMany([
// { "item": "journal", "qty": 25, "size": { "h": 14, "w": 21, "uom": "cm" }, "status": "A" },
// { "item": "notebook", "qty": 50, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "A" },
// { "item": "paper", "qty": 100, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "D" },
// { "item": "planner", "qty": 75, "size": { "h": 22.85, "w": 30, "uom": "cm" }, "status": "D" },
// { "item": "postcard", "qty": 45, "size": { "h": 10, "w": 15.25, "uom": "cm" }, "status": "A" }
// ]);

// db.inventory.find({})

// db.inventory.updateOne(
//   { item: 'notebook' },
//   { $set: { qty: 49 }}
// )

// db.inventory.updateMany(
//   { qty: { $gte: 75 } },
//   { $set: { qty: 50 } }
// )

// db.products.insertOne({
//   _id: 100,
//   sku: "abc123",
//   quantity: 250,
//   instock: true,
//   reorder: false,
//   details: { model: "14Q2", make: "xyz" },
//   tags: [ "apparel", "clothing" ],
//   ratings: [ { by: "ijk", rating: 4 } ]
// })

// db.products.updateOne(
//   { _id: 100 },
//   { $set: {
//       quantity: 500,
//       details: { model: "14Q3", make: "xyz" },
//       tags: [ "coats", "outerwear", "clothing" ]
//     }
//   }
// );

// db.products.updateOne(
//   { _id: 100 },
//   { $set: { "details.make": "zzz" } }
// );

// db.products.insertOne(
//   { "_id": 1, "item": "ABC", "price": NumberDecimal("10.99"), "qty": 25 }
// );

// db.products.update(
//   { _id: 1 },
//   { $mul: { price: NumberDecimal("1.25"), qty: 2 } }
// );

// db.products.find({});

// db.customers.insertOne(
//   { _id: 1, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }
// );

// db.customers.updateOne(
//   { _id: 1 },
//   { $currentDate: {
//       lastModified: true,
//       "cancellation.date": { $type: "timestamp" }
//     }, $set: {
//       "cancellation.reason": "user request",
//       status: "D"
//     }
//   }
// );

// db.customers.find({})

// use ("class");
// db.movies.insertMany([
//   {
//   "title": "Batman",
//   "category": [ "action", "adventure" ],
//   "imdbRating": 7.6,
//   "budget": 35
//   },
//   {
//     "title": "Godzilla",
//     "category": [ "action", "adventure", "sci-fi" ],
//     "imdbRating": 6.6
//   },
//   {
//     "title": "Home Alone",
//     "category": [ "family", "comedy" ],
//     "imdbRating": 7.4
//   }
// ])

// db.movies.find({})

// Exercício 1: Altere o imdbRating para 7.7 no filme Batman.

// db.movies.updateOne(
//   { title: "Batman" },
//   { $set: { imdbRating: 7.7 } }
// )

// Exercício 2: Altere budget para 1 no filme Godzilla.

// db.movies.updateOne(
//   { title: "Godzilla" },
//   { $set: { budget: 1 } }
// )

// Exercício 3: Altere budget para 15 e imdbRating para 5.5 no filme Home Alone.

// db.movies.updateOne(
//   { title: "Home Alone" },
//   { $set: { budget: 15 } }
// )
// db.movies.find({})

// Exercício 4: Aumente em 2 o imdbRating do filme Batman.

// db.movies.updateOne(
//   { title: "Batman" },
//   { $inc: { imdbRating: 2 } }
// )
// db.movies.find({})

// Exercício 5: Aumente em 5 o budget do filme Home Alone.

// db.movies.updateOne(
//   { title: "Home Alone" },
//   { $inc: { budget: 5 } }
// )
// db.movies.find({})

// Exercício 6: Multiplique por 4 o imdbRating do filme Batman.

// db.movies.updateOne(
//   { title: "Batman" },
//   { $mul: { imdbRating: 4 } }
// )
// db.movies.find({})

// Exercício 7: Renomeie o campo budget para estimatedBudget do filme Batman.

// db.movies.updateOne(
//   { title: "Batman" },
//   { $rename: { budget: 'estimatedBudget' } }
// )
// db.movies.find({})

// Exercício 8: Utilize o operador $min para alterar o budget para 5 do filme Home Alone.

// db.movies.updateOne(
//   { title: "Home Alone" },
//   { $min: { budget: 5 } }
// )
// db.movies.find({})

// Exercício 9: Utilize o operador $max para alterar o imdbRating para 8.6 do filme Godzilla. Além disso, altere a categoria "adventure" para "thriller" do filme Godzilla.

// db.movies.updateOne(
//   { title: "Godzilla" },
//   { 
//     $max: { imdbRating: 8.6 },
//     $set: { "category.1": "thriller" }
//   }
// )
// db.movies.find({})

// Exercício 10: Utilizando o operador $currentDate, crie um campo chamado lastUpdated com o tipo timestamp no filme Home Alone.

// db.movies.updateOne(
//   { title: "Home Alone" },
//   { 
//     $currentDate: {
//       lastUpdated: { $type: "timestamp" }
//     },
//   }
// )
// db.movies.find({})

// Exercício 11: Utilizando uma única operação, crie um campo chamado sequels e atribua a ele o valor 0 em todos os documentos.

// db.movies.updateMany(
//   {},
//   { $set: { sequels: 0 } }
// )
// db.movies.find({})

// Exercício 12: Utilizando uma única operação, remova os campos budget e estimatedBudget em todos os documentos.

// db.movies.updateMany(
//   {},
//   { $unset: { budget: "", estimatedBudget: "" } }
// )
// db.movies.find({})

// Exercício 13: Para os filmes Batman ou Home Alone, atribua a imdbRating o valor 17, caso o valor de imdbRating seja menor que 17.

// db.movies.updateMany(
//   { title: { $in: ['Batman', 'Home Alone'] } },
//   { $max: { imdbRating: 17 } }
// )
// db.movies.find({})
